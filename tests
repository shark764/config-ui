diff --git a/.dockerignore b/.dockerignore
index 1a3d842..4613b5d 100644
--- a/.dockerignore
+++ b/.dockerignore
@@ -5,5 +5,4 @@ bower_components/
 .editorconfig
 src/
 e2e/
-gulp/
-
+gulp/
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index cf76928..ef96e2d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,4 +6,5 @@ dist/
 .editorconfig
 /.project
 coverage/
-npm-debug.log
\ No newline at end of file
+npm-debug.log
+jenkins/
\ No newline at end of file
diff --git a/src/app/components/configuration/configurationController.spec.js b/src/app/components/configuration/configurationController.spec.js
deleted file mode 100644
index a2da155..0000000
--- a/src/app/components/configuration/configurationController.spec.js
+++ /dev/null
@@ -1,24 +0,0 @@
-'use strict';
-
-describe('ConfigurationController', function () {
-  var $scope,
-    $controller,
-    $state;
-
-  beforeEach(module('liveopsConfigPanel'));
-  beforeEach(module('gulpAngular'));
-
-  beforeEach(inject(['$rootScope', '$controller', '$state',
-    function ($rootScope, _$controller_, _$state_) {
-      $scope = $rootScope.$new();
-      $controller = _$controller_;
-      $state = _$state_;
-      
-      $controller('ConfigurationController', {'$scope': $scope, '$state': $state});
-    }
-  ]));
-
-  it('should declare sidebarConfig', function () {
-    expect($scope.sidebarConfig).toBeDefined();
-  });
-});
\ No newline at end of file
diff --git a/src/app/components/content/ContentController.js b/src/app/components/content/ContentController.js
index 473c3a9..3152a0f 100644
--- a/src/app/components/content/ContentController.js
+++ b/src/app/components/content/ContentController.js
@@ -9,10 +9,11 @@ angular.module('liveopsConfigPanel')
       });
 
       $scope.redirectToInvites = function () {
-        if (!Session.tenant.tenantId) {
-          $state.transitionTo('content.invites');
-          toastr.warning('You have no tenants assigned to you. Invite yourself to one!');
-        }
+          if(!Session.tenant.tenantId){
+            $state.transitionTo('content.invites');
+            toastr.warning('You have no tenants assigned to you. Invite yourself to one!');
+          }
       };
+
     }
-  ]);
\ No newline at end of file
+  ]);
diff --git a/src/app/components/content/ContentController.spec.js b/src/app/components/content/ContentController.spec.js
deleted file mode 100644
index 48edc46..0000000
--- a/src/app/components/content/ContentController.spec.js
+++ /dev/null
@@ -1,67 +0,0 @@
-/* global spyOn: false  */
-
-'use strict';
-
-describe('ConfigurationController', function () {
-  var $scope,
-    $controller,
-    $httpBackend,
-    $state,
-    Session,
-    apiHostname,
-    regions,
-    tenantId;
-
-  beforeEach(module('liveopsConfigPanel'));
-  beforeEach(module('gulpAngular'));
-
-  beforeEach(inject(['$rootScope', '$controller', '$httpBackend', '$state', 'Session', 'apiHostname',
-    function ($rootScope, _$controller_, _$httpBackend_, _$state_, _Session_, _apiHostname_) {
-      $scope = $rootScope.$new();
-      $controller = _$controller_;
-      $httpBackend = _$httpBackend_;
-      $state = _$state_;
-      Session = _Session_;
-      apiHostname = _apiHostname_;
-    }
-  ]));
-  
-  beforeEach(function() {
-    regions = [{
-      'id': 'c98f5fc0-f91a-11e4-a64e-7f6e9992be1f',
-      'description': 'US East (N. Virginia)',
-      'name': 'us-east-1'
-    }];
-
-    tenantId = 'c98f5fc0-f91a-11e4-a64e-000e9992be1f';
-    
-    $httpBackend.when('GET', apiHostname + '/v1/regions').respond({'result' : regions});
-    
-    $controller('ContentController', {'$scope': $scope});
-    
-    $httpBackend.flush();
-  });
-  
-  it('should set activeRegionId to first region found', function () {
-    expect($scope.regions[0].id).toEqual(regions[0].id);
-    expect(Session.activeRegionId).toEqual(regions[0].id);
-  });
-  
-  it('should transition when Session tenantId is not set', function () {
-    spyOn($state, 'transitionTo');
-    
-    $scope.redirectToInvites();
-    
-    expect($state.transitionTo).toHaveBeenCalled();
-  });
-  
-  it('should not transition when Session tenantId is set', function () {
-    Session.tenant.tenantId = tenantId;
-    
-    spyOn($state, 'transitionTo');
-    
-    $scope.redirectToInvites();
-    
-    expect($state.transitionTo).not.toHaveBeenCalled();
-  });
-});
\ No newline at end of file
diff --git a/src/app/components/designer/designerController.spec.js b/src/app/components/designer/designerController.spec.js
deleted file mode 100644
index ffd3bf2..0000000
--- a/src/app/components/designer/designerController.spec.js
+++ /dev/null
@@ -1,24 +0,0 @@
-'use strict';
-
-describe('DesignerController', function () {
-  var $scope,
-    $controller,
-    $state;
-
-  beforeEach(module('liveopsConfigPanel'));
-  beforeEach(module('gulpAngular'));
-
-  beforeEach(inject(['$rootScope', '$controller', '$state',
-    function ($rootScope, _$controller_, _$state_) {
-      $scope = $rootScope.$new();
-      $controller = _$controller_;
-      $state = _$state_;
-      
-      $controller('DesignerController', {'$scope': $scope, '$state': $state});
-    }
-  ]));
-
-  it('should declare sidebarConfig', function () {
-    expect($scope.sidebarConfig).toBeDefined();
-  });
-});
\ No newline at end of file
diff --git a/src/app/components/designer/flows/flowDetailBody.html b/src/app/components/designer/flows/flowDetailBody.html
index a43b354..c4aedcb 100644
--- a/src/app/components/designer/flows/flowDetailBody.html
+++ b/src/app/components/designer/flows/flowDetailBody.html
@@ -26,15 +26,6 @@
   </div>
 </div>
 
-<div class="input-group">
-  <label>{{'flow.type' | translate}}</label>
-  <div>
-    <select ng-model="resource.type" ng-options="type.value as type.display for type in flowTypes">
-      <option value="">{{'flow.type.choose' | translate}}</option>
-    </select>
-  </div>
-</div>
-
 <div ng-if="resource.id" class="divider-header">
   <h4>Versions</h4>
 </div>
diff --git a/src/app/components/designer/flows/flowTypes.js b/src/app/components/designer/flows/flowTypes.js
deleted file mode 100644
index 4ba4754..0000000
--- a/src/app/components/designer/flows/flowTypes.js
+++ /dev/null
@@ -1,7 +0,0 @@
-'use strict';
-
-angular.module('liveopsConfigPanel')
-  .constant('flowTypes', [{
-    display: 'Customer',
-    value: 'customer'
-  }]);
\ No newline at end of file
diff --git a/src/app/components/designer/flows/flows.html b/src/app/components/designer/flows/flows.html
index 4718f7d..222ffdb 100644
--- a/src/app/components/designer/flows/flows.html
+++ b/src/app/components/designer/flows/flows.html
@@ -1,3 +1,4 @@
+
 <table-controls
   id="table-pane"
   config="tableConfig"
@@ -15,7 +16,7 @@
 
 <resource-details
   id="details-pane"
-  extend-scope="additional"
+  extend-scope="{versions: []}"
   header-template-url="app/components/designer/flows/flowDetailHeader.html"
   body-template-url="app/components/designer/flows/flowDetailBody.html"
   original-resource="selectedFlow"></resource-details>
diff --git a/src/app/components/designer/flows/flowsController.js b/src/app/components/designer/flows/flowsController.js
index 72b6059..282d023 100644
--- a/src/app/components/designer/flows/flowsController.js
+++ b/src/app/components/designer/flows/flowsController.js
@@ -1,8 +1,8 @@
 'use strict';
 
 angular.module('liveopsConfigPanel')
-  .controller('FlowsController', ['$scope', '$state', 'Session', 'Flow', 'flowTableConfig', 'flowTypes',
-    function ($scope, $state, Session, Flow, flowTableConfig, flowTypes) {
+  .controller('FlowsController', ['$scope', '$state', 'Session', 'Flow', 'flowTableConfig',
+    function ($scope, $state, Session, Flow, flowTableConfig) {
 
       $scope.redirectToInvites();
 
@@ -21,12 +21,7 @@ angular.module('liveopsConfigPanel')
       $scope.$watch('Session.tenant', function () {
         $scope.fetch();
       });
-      
-      $scope.additional = {
-        versions: {},
-        flowTypes: flowTypes
-      };
-      
+
       $scope.fetch();
       $scope.tableConfig = flowTableConfig;
     }
diff --git a/src/app/components/designer/flows/flowsService.js b/src/app/components/designer/flows/flowsService.js
index 93492e9..8bcbba0 100644
--- a/src/app/components/designer/flows/flowsService.js
+++ b/src/app/components/designer/flows/flowsService.js
@@ -7,8 +7,7 @@ angular.module('liveopsConfigPanel')
       {name: 'name'},
       {name: 'description', optional: true},
       {name: 'activeVersion'},
-      {name: 'channelType', optional: true},
-      {name: 'type'}
+      {name: 'channelType', optional: true}
     ],[
       'id', 'tenantId'
     ]);
diff --git a/src/app/components/designer/flows/versions/flowVersions.js b/src/app/components/designer/flows/versions/flowVersions.js
new file mode 100644
index 0000000..79e4adb
--- /dev/null
+++ b/src/app/components/designer/flows/versions/flowVersions.js
@@ -0,0 +1,53 @@
+'use strict';
+
+angular.module('liveopsConfigPanel')
+  .controller('FlowVersionsController', ['$scope', 'Session', 'FlowVersion',
+    function ($scope, Session, Version) {
+
+      $scope.fetch = function () {
+        Version.query({
+          tenantId: Session.tenant.tenantId,
+          flowId: $scope.flow.id
+        }, function(versions){
+          $scope.versions = angular.copy(versions, $scope.versions);
+        });
+      };
+
+      $scope.saveVersion = function () {
+        $scope.version.save({
+          tenantId: Session.tenant.tenantId,
+          flowId: $scope.flow.id
+        }, function() {
+          $scope.versions.push($scope.version);
+        });
+      };
+
+      $scope.createVersion = function () {
+        $scope.version = new Version({
+          flowId: $scope.flow.id,
+          flow: '[]'
+        });
+      };
+
+      $scope.$on('created:resource:tenants:' + Session.tenantId + ':flows:' + $scope.flow.id + ':versions', function (event, item) {
+        $scope.flow.versions.push(item);
+        $scope.selectedVersion = item;
+      });
+
+      $scope.$watch('flow', function () {
+        $scope.fetch();
+      });
+
+      $scope.createVersion();
+    }
+  ])
+  .directive('flowVersions', [function () {
+    return {
+      scope: {
+        flow: '=',
+        versions: '='
+      },
+      templateUrl: 'app/components/designer/flows/versions/flowVersions.html',
+      controller: 'FlowVersionsController'
+    };
+  }]);
diff --git a/src/app/components/designer/flows/versions/flowVersions.spec.js b/src/app/components/designer/flows/versions/flowVersions.spec.js
new file mode 100644
index 0000000..3aa01bf
--- /dev/null
+++ b/src/app/components/designer/flows/versions/flowVersions.spec.js
@@ -0,0 +1,55 @@
+'use strict';
+
+describe('Versions directive controller', function() {
+    var $scope,
+        $controller,
+        $httpBackend,
+        versions,
+        FlowVersion;
+
+    beforeEach(module('liveopsConfigPanel'));
+    beforeEach(module('gulpAngular'));
+    beforeEach(inject(['$rootScope', '$controller', '$injector', 'FlowVersion', function($rootScope, _$controller_, $injector, _FlowVersion_) {
+      $scope = $rootScope.$new();
+      $controller = _$controller_;
+      FlowVersion = _FlowVersion_;
+
+      versions = [
+        new FlowVersion({
+          name: 'q1',
+          description: 'A pretty good version',
+          id: 'q1'
+        }),
+        new FlowVersion({
+          name: 'q2',
+          description: 'Not as cool as the other version',
+          id: 'q2'
+        })
+      ];
+
+      $httpBackend = $injector.get('$httpBackend');
+      $httpBackend.when('GET', 'fakendpoint.com/v1/tenants/1/flows/1/versions').respond({'result' : versions});
+
+      $scope.flow = {
+          id : 1
+      };
+
+      $controller('FlowVersionsController', {'$scope': $scope, 'Session' : {tenant : { tenantId : 1}}});
+
+      $httpBackend.flush();
+    }]));
+
+    it('should have versions defined', function() {
+        expect($scope.versions).toBeDefined();
+        expect($scope.versions[0].id).toEqual(versions[0].id);
+        expect($scope.versions[1].id).toEqual(versions[1].id);
+    });
+
+    it('should have a function to create a new version', function() {
+        $scope.createVersion();
+
+        expect($scope.version).toBeDefined();
+        expect($scope.version.flow).toBe('[]');
+        expect($scope.version.flowId).toBe($scope.flow.id);
+    });
+});
diff --git a/src/app/components/designer/flows/versions/flowVersionsController.js b/src/app/components/designer/flows/versions/flowVersionsController.js
deleted file mode 100644
index 1e9c08b..0000000
--- a/src/app/components/designer/flows/versions/flowVersionsController.js
+++ /dev/null
@@ -1,58 +0,0 @@
-'use strict';
-
-angular.module('liveopsConfigPanel')
-  .controller('FlowVersionsController', ['$scope', 'Session', 'FlowVersion',
-    function ($scope, Session, Version) {
-      var clean;
-      $scope.fetch = function () {
-        Version.query({
-          tenantId: Session.tenant.tenantId,
-          flowId: $scope.flow.id
-        }, function (versions) {
-          $scope.versions = angular.copy(versions, $scope.versions);
-        });
-      };
-
-      $scope.saveVersion = function () {
-        $scope.version.save({
-          tenantId: Session.tenant.tenantId,
-          flowId: $scope.flow.id
-        }, function () {
-          $scope.versions.push($scope.version);
-        });
-      };
-
-      $scope.createVersion = function () {
-        $scope.version = new Version({
-          flowId: $scope.flow.id,
-          flow: '[]'
-        });
-      };
-
-      $scope.$watch('flow', function () {
-        $scope.fetch();
-        
-        if(clean){
-          clean();
-        }
-        
-        clean = $scope.$on('created:resource:tenants:' + Session.tenantId + ':flows:' + $scope.flow.id + ':versions',
-          function (event, item) {
-            $scope.flow.versions.push(item);
-            $scope.selectedVersion = item;
-          });
-      });
-
-      $scope.createVersion();
-    }
-  ])
-  .directive('flowVersions', [function () {
-    return {
-      scope: {
-        flow: '=',
-        versions: '='
-      },
-      templateUrl: 'app/components/designer/flows/versions/flowVersions.html',
-      controller: 'FlowVersionsController'
-    };
-  }]);
\ No newline at end of file
diff --git a/src/app/components/designer/flows/versions/flowVersionsController.spec.js b/src/app/components/designer/flows/versions/flowVersionsController.spec.js
deleted file mode 100644
index 6958ace..0000000
--- a/src/app/components/designer/flows/versions/flowVersionsController.spec.js
+++ /dev/null
@@ -1,87 +0,0 @@
-'use strict';
-
-describe('Versions directive controller', function () {
-  var $scope,
-    $controller,
-    $httpBackend,
-    versions,
-    FlowVersion,
-    flowId,
-    flow;
-
-  beforeEach(module('liveopsConfigPanel'));
-  beforeEach(module('gulpAngular'));
-  beforeEach(inject(['$rootScope', '$controller', '$injector', 'FlowVersion',
-    function ($rootScope, _$controller_, $injector, _FlowVersion_) {
-      $scope = $rootScope.$new();
-      $controller = _$controller_;
-      FlowVersion = _FlowVersion_;
-
-      versions = [
-        new FlowVersion({
-          name: 'q1',
-          description: 'A pretty good version',
-          id: 'q1'
-        }),
-        new FlowVersion({
-          name: 'q2',
-          description: 'Not as cool as the other version',
-          id: 'q2'
-        })
-      ];
-      
-      flowId = 555;
-      flow = '[]';
-      
-      $httpBackend = $injector.get('$httpBackend');
-      $httpBackend.when('GET', 'fakendpoint.com/v1/tenants/1/flows/' + flowId + '/versions').respond({
-        'result': versions
-      });
-      
-      $scope.flow = {
-        id: flowId
-      };
-
-      $controller('FlowVersionsController', {
-        '$scope': $scope,
-        'Session': {
-          tenant: {
-            tenantId: 1
-          }
-        }
-      });
-
-      $httpBackend.flush();
-    }
-  ]));
-
-  it('should have versions defined', function () {
-    expect($scope.versions).toBeDefined();
-    expect($scope.versions[0].id).toEqual(versions[0].id);
-    expect($scope.versions[1].id).toEqual(versions[1].id);
-  });
-
-  describe('on new version creation', function () {
-    beforeEach(function () {
-      $scope.createVersion();
-      
-      $httpBackend.when('POST', 'fakendpoint.com/v1/tenants/1/flows/' + flowId + '/versions').respond({
-        'result': versions[0]
-      });
-    });
-
-    it('should have a function to create a new version', function () {
-      expect($scope.version).toBeDefined();
-      expect($scope.version.flow).toBe(flow);
-      expect($scope.version.flowId).toBe(flowId);
-    });
-
-    it('should succeed on save', function () {
-      $scope.saveVersion();
-      
-      $httpBackend.flush();
-      
-      expect($scope.versions.length).toEqual(3);
-    });
-  });
-});
\ No newline at end of file
diff --git a/src/app/components/management/skills/skillDetailBody.html b/src/app/components/management/skills/skillDetailBody.html
index 6c6dc4c..6324d96 100644
--- a/src/app/components/management/skills/skillDetailBody.html
+++ b/src/app/components/management/skills/skillDetailBody.html
@@ -24,6 +24,6 @@
   <label>{{'skill.details.hasProficiency' | translate}}</label>
   <div>
     <div class="error" ng-show="detailsForm.hasProficiency.$touched && detailsForm.hasProficiency.$invalid">{{'skill.details.hasProficiency.error' | translate}}</div>
-    <toggle ng-disabled="resource.id" class="status-toggle" name="hasProficiency" ng-model="resource.hasProficiency"></toggle>
+    <input ng-disabled="resource.id" ng-model="resource.hasProficiency" name="hasProficiency" type="checkbox"></input>
   </div>
 </div>
diff --git a/src/app/components/management/users/userDetailBody.html b/src/app/components/management/users/userDetailBody.html
index dad2f69..fbbe529 100644
--- a/src/app/components/management/users/userDetailBody.html
+++ b/src/app/components/management/users/userDetailBody.html
@@ -4,7 +4,7 @@
   </div>
 
   <div class="input-group">
-    <label>{{'details.email' | translate}}</label>
+    <label>{{'details.email' | translate}} *</label>
     <div>
       <form-error field="detailsForm.email" error-type-api="{{'details.email.error' | translate}}" error-type-required="{{'details.email.error' | translate}}" error-type-email="{{'details.email.invalid' | translate}}"></form-error>
       <input autocomplete="off" ng-model="resource.email" name="email" type="email" ng-required="true"></input>
@@ -12,7 +12,7 @@
   </div>
 
   <div class="input-group">
-    <label>{{'details.password' | translate}}</label>
+    <label>{{'details.password' | translate}} *</label>
     <div>
       <form-error field="detailsForm.password" error-type-api="{{'details.password.error' | translate}}" error-type-required="{{'details.password.error' | translate}}"></form-error>
       <input autocomplete="off" ng-model="resource.password" name="password" type="password" ng-required="true"></input>
@@ -25,7 +25,7 @@
 </div>
 
 <div class="input-group">
-  <label>{{'details.firstName' | translate}}</label>
+  <label>{{'details.firstName' | translate}} *</label>
   <div>
     <form-error field="detailsForm.firstName" error-type-api="{{'details.firstName.error' | translate}}" error-type-required="{{'details.firstName.error' | translate}}"></form-error>
     <input ng-required="true" ng-model="resource.firstName" name="firstName" type="text" ng-change="updateDisplayName(this)"></input>
@@ -33,7 +33,7 @@
 </div>
 
 <div class="input-group">
-  <label>{{'details.lastName' | translate}}</label>
+  <label>{{'details.lastName' | translate}} *</label>
   <div>
     <form-error field="detailsForm.lastName" error-type-api="{{'details.lastName.error' | translate}}" error-type-required="{{'details.lastName.error' | translate}}"></form-error>
     <input required ng-model="resource.lastName" name="lastName" type="text" ng-change="updateDisplayName(this)"></input>
@@ -41,7 +41,7 @@
 </div>
 
 <div class="input-group">
-  <label>{{'details.displayName' | translate}}</label>
+  <label>{{'details.displayName' | translate}} *</label>
   <div>
     <form-error field="detailsForm.displayName" error-type-api="{{'details.displayName.error' | translate}}" error-type-required="{{'details.displayName.error' | translate}}"></form-error>
     <input required ng-model="resource.displayName" name="displayName" type="text"></input>
diff --git a/src/app/components/management/users/usersController.js b/src/app/components/management/users/usersController.js
index 2e5e5d9..a0e0312 100644
--- a/src/app/components/management/users/usersController.js
+++ b/src/app/components/management/users/usersController.js
@@ -7,26 +7,26 @@ angular.module('liveopsConfigPanel')
       $scope.filteredUsers = [];
       $scope.Session = Session;
 
-      var newPassword;
-      var preSave = function(scope) {
+      this.newPassword = null;
+      this.preSave = function(scope) {
         if(scope.resource.password){
-          newPassword = scope.resource.password;
+          this.newPassword = scope.resource.password;
         }
       };
 
-      var postSave = function(scope, result){
-        if(result.id === Session.user.id && newPassword) {
+      this.postSave = function(scope, result){
+        if(result.id === Session.user.id && this.newPassword) {
           var token = AuthService.generateToken(
-            result.email, newPassword);
+            result.email, this.newPassword);
           Session.setUser(scope.resource);
           Session.setToken(token);
-          newPassword = null;
+          this.newPassword = null;
         }
         
         Invite.save({tenantId: Session.tenant.tenantId}, {email : result.email, roleId : '00000000-0000-0000-0000-000000000000'} ); //TEMPORARY roleId
       };
       
-      var postError = function(scope, error){
+      this.postError = function(scope, error){
         if (error.config.method === 'POST' && error.status === 400){
           toastr.clear();
           toastr.success('User already exists. Sending ' + scope.resource.email + ' an invite for ' + Session.tenant.name, '', {timeout: 5000});
@@ -36,9 +36,9 @@ angular.module('liveopsConfigPanel')
       };
 
       $scope.additional = {
-        preSave: preSave,
-        postSave: postSave,
-        postError: postError,
+        preSave: this.preSave,
+        postSave: this.postSave,
+        postError: this.postError,
         roles: userRoles,
         updateDisplayName : function($childScope){
           if (!$childScope.resource.id && $childScope.detailsForm.displayName.$untouched){
diff --git a/src/app/components/management/users/usersController.spec.js b/src/app/components/management/users/usersController.spec.js
index 39fc84b..1a47588 100644
--- a/src/app/components/management/users/usersController.spec.js
+++ b/src/app/components/management/users/usersController.spec.js
@@ -1,18 +1,23 @@
 'use strict';
 
-/* global jasmine: false  */
+/* global jasmine, spyOn: false  */
 
 describe('users controller', function(){
   var $scope,
     $httpBackend,
     users,
     Session,
-    childScope;
+    childScope,
+    $injector,
+    controller,
+    Invite;
 
   beforeEach(module('liveopsConfigPanel'));
   beforeEach(module('gulpAngular'));
 
-  beforeEach(inject(['$compile', '$rootScope', '$injector', '$controller', 'apiHostname', function($compile, $rootScope, $injector, $controller, apiHostname) {
+  beforeEach(inject(['$compile', '$rootScope', '$injector', '$controller', 'apiHostname', function($compile, $rootScope, _$injector_, $controller, apiHostname) {
+    $injector = _$injector_;
+    
     users  = [ {
       'id': 'c6aa44f6-b19e-49f5-bd3f-66f00b885e39',
       'status': false,
@@ -41,8 +46,12 @@ describe('users controller', function(){
 
     $scope = $rootScope.$new();
     $scope.users = users;
-	Session = {collapseSideMenu: true};
-    $controller('UsersController', {'$scope': $scope, 'Session' : Session});
+    Session = {collapseSideMenu: true, tenant : {tenantId : 1, name: 'tenant 1'}};
+    Session. user = {id : 1};
+    Session.setUser = function(){};
+    Session.setToken = function(){};
+    Invite = {save : function(){}};
+    controller = $controller('UsersController', {'$scope': $scope, 'Session' : Session, 'Invite' : Invite});
     $httpBackend.flush();
   }]));
 
@@ -89,6 +98,78 @@ describe('users controller', function(){
       expect(childScope.resource.displayName).toEqual('');
     }));
   });
+  
+  describe('postSave function', function(){
+    it('should reset the session authentication token if user changes their own password', inject(function() {
+      var result = {
+          id : 1,
+          email: 'somenewemail@test.com'
+      };
+      
+      var AuthService = $injector.get('AuthService');
+      var token = AuthService.generateToken('somenewemail@test.com', 'anewpassword');
+      
+      spyOn(Session, 'setToken');
+      controller.preSave({resource : {password : 'anewpassword'}}); //Set newPassword
+      controller.postSave($scope, result);
+      expect(Session.setToken).toHaveBeenCalledWith(token);
+      
+    }));
+    
+    it('should create an invite for the new user', inject(function() {
+      spyOn(Invite, 'save');
+      controller.postSave({}, {email : 'somenewemail@test.com'});
+      expect(Invite.save).toHaveBeenCalledWith({tenantId: 1}, {email : 'somenewemail@test.com', roleId : '00000000-0000-0000-0000-000000000000'});
+    }));
+  });
 
+  describe('postError function', function(){
+    it('should do nothing if error code is not 400', inject(function() {
+      var error = {
+          config : {
+            method : 'POST'
+          },
+          status : '500'
+      };
+      
+      spyOn(Invite, 'save');
+      controller.postError({}, error);
+      expect(Invite.save).not.toHaveBeenCalled();
+      
+      error.status = 404;
+      controller.postError({}, error);
+      expect(Invite.save).not.toHaveBeenCalled();
+    }));
+    
+    it('should do nothing if http method is not POST', inject(function() {
+      var error = {
+          config : {
+            method : 'GET'
+          },
+          status : 400
+      };
+      
+      spyOn(Invite, 'save');
+      controller.postError({}, error);
+      expect(Invite.save).not.toHaveBeenCalled();
+      
+      error.config.method = 'PUT';
+      controller.postError({}, error);
+      expect(Invite.save).not.toHaveBeenCalled();
+    }));
+    
+    it('should create an invite if error is 400 and method is POST', inject(function() {
+      var error = {
+          config : {
+            method : 'POST'
+          },
+          status : 400
+      };
+      
+      spyOn(Invite, 'save');
+      controller.postError({resource : {email : 'email'}, cancel : function(){}}, error);
+      expect(Invite.save).toHaveBeenCalledWith({tenantId: 1}, {email : 'email', roleId : '00000000-0000-0000-0000-000000000000'});
+    }));
+  });
 
 });
diff --git a/src/app/index.scss b/src/app/index.scss
index 3d13431..2829fb9 100644
--- a/src/app/index.scss
+++ b/src/app/index.scss
@@ -26,7 +26,7 @@ h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
 }
 
 a {
-  color: #777;
+  color: $dark-grey;
   text-decoration: none;
 }
 
diff --git a/src/app/shared/sass/_fonts.scss b/src/app/shared/sass/_fonts.scss
index a3f7ce1..a61bc7d 100644
--- a/src/app/shared/sass/_fonts.scss
+++ b/src/app/shared/sass/_fonts.scss
@@ -1,2 +1 @@
-@import url(//fonts.googleapis.com/css?family=Montserrat:700,400);
 @import url(//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600);
diff --git a/src/app/shared/sass/_inputs.scss b/src/app/shared/sass/_inputs.scss
index 23b1110..0788214 100644
--- a/src/app/shared/sass/_inputs.scss
+++ b/src/app/shared/sass/_inputs.scss
@@ -13,7 +13,7 @@ input[type=password], input[type=text], input[type=email], select, textarea{  ba
   box-shadow: 0 1px 2px rgba(0,0,0,0.2) inset, 0 -1px 0 rgba(0,0,0,0.05) inset;
   transition: all 0.2s linear;
   font-size: 13px;
-  color: #222222;
+  color: $darkest-grey;
   max-width: 100%;
   position: relative;
   height: $input-height;
@@ -22,11 +22,11 @@ input[type=password], input[type=text], input[type=email], select, textarea{  ba
   width:100%;
 
   &::-webkit-input-placeholder {
-    color: #999999;
+    color: $grey;
   }
 
   &:-moz-placeholder {
-    color: #999999;
+    color: $grey;
   }
 
   &:focus{
